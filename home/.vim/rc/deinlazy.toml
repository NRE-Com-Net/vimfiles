[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
  let g:echodoc#type = 'signature'
  call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent> <F2> :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
    :imap <silent> <F2> <C-o>:<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
'''
hook_source = '''
    source $RC_PATH/plugins/defx.rc.vim
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertEnter'
if = 'has("nvim")'
hook_source = '''
  imap <C-k>  <Plug>(deoppet_expand)
  imap <C-f>  <Plug>(deoppet_jump_forward)
  imap <C-b>  <Plug>(deoppet_jump_backward)
  smap <C-f>  <Plug>(deoppet_jump_forward)
  smap <C-b>  <Plug>(deoppet_jump_backward)
  xmap <C-l>  <Plug>(deoppet_select_text)
  xmap <C-x>  <Plug>(deoppet_cut_text)
  call deoppet#initialize()
  call deoppet#custom#option('snippets',
          \ [{ 'path': expand('~/.vim/my-snippets')}] +
          \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
          \     "{ 'path': v:val }"))
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/tabpagebuffer.vim'
on_if = 'tabpagenr() > 1'

[[plugins]]
repo = 'zyphrus/unite-tasklist'
on_source = 'unite.vim'
hook_add  = '''
    let g:unite_tasklist_ignorecase = 1
    let g:unite_tasklist_tokens = [
        \ 'CAUTION',
        \ 'FIXME',
        \ 'HACK',
        \ 'PATCH',
        \ 'TBD',
        \ 'TODO',
        \ 'XXX',
        \]
'''

[[plugins]]
repo = 'tweekmonster/deoplete-clang2'
on_ft = ['c', 'cpp']
hook_source = '''
  autocmd FileType c,cpp let b:clang2_orig_maps = {}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = 'go'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    source $RC_PATH/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
depends = 'denite.nvim'
on_source = ['defx.nvim', 'denite.nvim']
hook_add = '''
  nnoremap <silent> [Space]s :<C-u>Deol zsh -no-start-insert -toggle<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '\w*% \?'
  let g:deol#shell_history_path = '~/.zsh-history'
  let g:deol#extra_options = {
      \ 'term_kill': 'kill',
      \ }
'''
[plugins.ftplugin]
deol = '''
  nnoremap <buffer><silent> [Space]gc
  \ :<C-u>call deol#send('git commit')<CR>
  nnoremap <buffer><silent> [Space]gs
  \ :<C-u>call deol#send('git status')<CR>
  nnoremap <buffer><silent> [Space]gA
  \ :<C-u>call deol#send('git commit --amend')<CR>
  nmap <buffer> i <Plug>(deol_edit)
  nmap <buffer> e <Plug>(deol_edit)
  tmap <buffer> <CR> <Plug>(deol_execute_line)
'''
zsh = '''
  inoreabbrev <buffer><expr> g deol#abbrev('g', 'g', 'git')
  inoreabbrev <buffer><expr> a deol#abbrev('git a', 'a', 'add')
  inoreabbrev <buffer><expr> b deol#abbrev('git b', 'b', 'branch')
  inoreabbrev <buffer><expr> c deol#abbrev('git c', 'c', 'commit')
  inoreabbrev <buffer><expr> d deol#abbrev('git d', 'd', 'diff')
  inoreabbrev <buffer><expr> p deol#abbrev('git p', 'p', 'push')
  inoreabbrev <buffer><expr> s deol#abbrev('git s', 's', 'status')
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source $RC_PATH/plugins/denite.rc.vim'
hook_add = '''
    nnoremap <silent> <F4> :<C-u>Denite buffer -no-start-filter<CR>
    inoremap <silent> <F4> <C-o>:<C-u>Denite buffer -no-start-filter<CR>
    nnoremap <silent> <F9> :<C-u>Denite tasklist -start-filter -vertical -winwidth=40<CR>
    inoremap <silent> <F9> <C-o>:<C-u>Denite tasklist -start-filter -vertical -winwidth=40<CR>
    nnoremap <silent> <C-P> :<C-u>Denite -buffer-name=files -start-filter file_mru<CR>
    nnoremap <silent> <C-f> :<C-u>Denite grep:. -buffer-name=grep%".tabpagenr()." -auto-preview -no-split -no-empty<CR>
    nnoremap <silent> <F10> :<C-u>Denite -buffer-name=register -no-start-filter register neoyank<CR>
    inoremap <silent> <F10> <C-o>:<C-u>Denite -buffer-name=register -no-start-filter register neoyank<CR>
    nnoremap <silent> <F11> :<C-u>Denite spell_suggest -no-start-filter<CR>
    inoremap <silent> <F11> <C-o>:<C-u>Denite spell_suggest -no-start-filter<CR>
    nnoremap <silent><expr> / wordcount().chars > 30000 ?
        \ ":\<C-u>Denite -buffer-name=search -start-filter
        \  -search line/external\<CR>" :
        \ ":\<C-u>Denite -buffer-name=search -start-filter -search line\<CR>"
    nnoremap <silent><expr> * wordcount().chars > 30000 ?
        \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line/external\<CR>" :
        \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line\<CR>"
    nnoremap <silent> n
        \ :<C-u>Denite -buffer-name=search -resume<CR>
'''
[plugins.ftplugin]
denite = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> a denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> e denite#do_map('do_action', 'edit')
  nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> N denite#do_map('do_action', 'new')
  nnoremap <silent><buffer><expr> q denite#do_map('quit')
  nnoremap <silent><buffer><expr> <F4> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <F9> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <F10> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <F11> denite#do_map('quit')
  nnoremap <silent><buffer><expr> q denite#do_map('quit')
  nnoremap <silent><buffer><expr> ' denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> r denite#do_map('do_action', 'quickfix')
  nnoremap <silent><buffer><expr> <C-r> denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> <C-l> denite#do_map('redraw')
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'
hook_add = '''
  let g:suda_smart_edit = 1
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
    xmap I  <Plug>(niceblock-I)
    xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'vim-jp/vital.vim'
on_command = 'Vitalize'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'html', 'php']

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['unite', 'quickfix']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>'
hook_add = 'nmap <silent> <Leader>r <Plug>(quickrun)'

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_source = 'source $RC_PATH/plugins/ref.rc.vim'

[[plugins]]
repo = 'mtscout6/vim-tagbar-css'
on_source = 'tagbar'

[[plugins]]
repo = 'kana/vim-tabpagecd'
unite_sources = 'tab'

[[plugins]]
repo = 'godlygeek/csapprox'

[[plugins]]
repo = 'thinca/vim-guicolorscheme'

[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = ['<Plug>CamelCaseMotion_w', '<Plug>CamelCaseMotion_b']

[[plugins]]
repo = 'syngan/vim-vimlint'
depends = 'ynkdir/vim-vimlparser'

# Operators
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'kana/vim-operator-user'
on_map = [['nx', '<Plug>']]

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'kana/vim-operator-user'
on_map = '<Plug>'

[[plugins]]
repo = 'chikatoike/concealedyank.vim'
on_map = [['x', '<Plug>(operator-concealedyank)']]

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'kana/vim-textobj-user'
on_map = [['ox', '<Plug>']]

[[plugins]]
repo = 'AndrewRadev/sideways.vim'
on_map = [['ox', '<Plug>']]

[[plugins]]
repo = 'lambdalisue/vim-gita'
commands = 'Gita'

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_map = {n = '<Plug>'}
hook_add = '''
  let g:gista#github_user = 'NemesisRE'
  let g:gista#directory = expand('$CACHE/gista')
'''

[[plugins]]
repo = 'shawncplus/phpcomplete.vim'
on_ft = ['php','ctp']

[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'
hook_add = '''
    filetype plugin indent on
'''

[[plugins]]
repo = 'spf13/PIV'
on_ft = ['php','ctp']
hook_add  = '''
    let g:DisableAutoPHPFolding=1
'''

[[plugins]]
repo = 'kovetskiy/vim-bash'
on_ft = 'sh'

[[plugins]]
repo = 'medihack/sh.vim'
on_ft = 'sh'
hook_add = '''
    let g:sh_indent_case_labels=1
'''

[[plugins]]
repo = 'vim-scripts/SQLComplete.vim'
on_ft = 'sql'

[[plugins]]
repo = 'bigbrozer/vim-nagios'
on_ft = 'ruby'

[[plugins]]
repo = 'saltstack/salt-vim'
on_ft = ['salt','sls']

